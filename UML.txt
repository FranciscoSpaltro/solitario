@startuml

class modelo.Basura {
  + mostrarUltimasTres(): ArrayList<modelo.Carta>
  + agregarCarta(carta: modelo.Carta): void
}

class modelo.ListaDeCartas {
  + cantidadCartas(): int
  + estaVacia(): boolean
  + extraerUltima(): modelo.Carta
  + verUltima(): modelo.Carta
  + agregarCarta(carta: modelo.Carta): void
  + obtenerCarta(index: int): modelo.Carta
  + extraerUltimasN(n: int): ArrayList<modelo.Carta>
  + cantidadCartasOcultas(): int
  + anexarCartas(cartas: ArrayList<modelo.Carta>): boolean
  + cantidadCartasVisibles(): int
  + darVueltaIndex(n: int): boolean
}

class modelo.Carta {
  - bocaArriba: boolean
  + modelo.Carta(valor: modelo.Valor, palo: modelo.Palo, bocaArriba: boolean)
  + verPalo(): modelo.Palo
  + verValor(): modelo.Valor
  + estaBocaArriba(): boolean
  + darVuelta(): boolean
  + verColor(): modelo.ColorPalo
}

class modelo.Cimiento {
  - id: int
  + modelo.Cimiento(id: int)
  + verId(): int
  + estaCompleto(): boolean
}

enum modelo.ColorPalo {
  ROJO,
  NEGRO
}

class modelo.InvalidMovementException{
}


enum modelo.ErrorAlMover {
  PILA_VACIA_NO_REY,
  ORDEN_NO_DESCENDENTE,
  ORDEN_NO_ASCENDENTE,
  CIMIENTO_VACIO_NO_AS,
  PILA_CARTAS_MISMO_COLOR,
  CARTA_A_MOVER_NO_BOCA_ARRIBA,
  CIMIENTO_CARTAS_DISTINTO_PALO,
  MAZO_VACIO,
  ERROR_DE_PROGRAMA,
  PILAS_VACIA_NO_PUEDE_SACAR_DEL_MAZO,
  PILA_INCOMPLETA_NO_PUEDE_IR_A_CIMIENTO,
  CARTAS_A_MOVER_DISTINTO_PALO,
  PILA_DIFERENTE_PALO_NO_PUEDE_IR_A_CIMIENTO
}

class modelo.Klondike {
  + inicializarJuego(): void
  + reiniciar(): void
  + repartirCartas(mazo: modelo.Mazo): void
  + moverPilaAPila(pilaOrigen: modelo.PilaDelTableau, pilaDestino: modelo.PilaDelTableau, n: int): boolean
  + moverPilaACimiento(pila: modelo.PilaDelTableau, cimiento: modelo.Cimiento): boolean
  + moverBasuraAPila(pila: modelo.PilaDelTableau): boolean
  + moverBasuraACimiento(cimiento: modelo.Cimiento): boolean
  + moverBasuraAMazo(): boolean
  + moverMazoABasura(): boolean
  + moverCimientoAPila(cimiento: modelo.Cimiento, pilaDestino: modelo.PilaDelTableau): boolean
}

abstract class modelo.Spider{
  + inicializarJuego(): void
  + reiniciar(): void
  + repartirCartas(mazo: modelo.Mazo): void
  + moverPilaAPila(pilaOrigen: modelo.PilaDelTableau, pilaDestino: modelo.PilaDelTableau, n: int): boolean
  + moverPilaACimiento(pila: modelo.PilaDelTableau, cimiento: modelo.Cimiento): boolean
}

class SpiderFacil{
}


class SpiderDificil{
}



class modelo.Mazo {
  + mezclar(): void
  + extraerUltima(): modelo.Carta
}

enum modelo.Palo {
  CORAZONES,
  DIAMANTES,
  TREBOLES,
  PICAS
}

class modelo.PilaDelTableau {
  - id: int
}

class modelo.Persistencia {
  + escribirObjeto(OutputStream, Object): void
  + importarObjeto(InputStream): Object
}

abstract class modelo.Solitario {
  - puntos: int
  + inicializarJuego(): void
  + jugadorGano(): boolean
  + reiniciar(): void
  + repartirCartas(mazo: modelo.Mazo): void
  + moverPilaAPila(pilaOrigen: modelo.PilaDelTableau, pilaDestino: modelo.PilaDelTableau, n: int): boolean
  + moverPilaACimiento(pila: modelo.PilaDelTableau, cimiento: modelo.Cimiento): boolean
  + moverBasuraAPila(pila: modelo.PilaDelTableau): boolean
  + moverBasuraACimiento(cimiento: modelo.Cimiento): boolean
  + moverBasuraAMazo(): boolean
  + moverCimientoAPila(cimiento: modelo.Cimiento, pilaDestino: modelo.PilaDelTableau): boolean
  + moverMazoABasura(): boolean
}

enum modelo.Valor {
  AS,
  DOS,
  TRES,
  CUATRO,
  CINCO,
  SEIS,
  SIETE,
  OCHO,
  NUEVE,
  DIEZ,
  JOTA,
  REINA,
  REY
}

enum modelo.Variante {
  KLONDIKE,
  SPIDER
}

class RunTimeException {}

modelo.ListaDeCartas "0" o--> "*" modelo.Carta : lista
modelo.Basura --|> modelo.ListaDeCartas
modelo.Carta *-.-> modelo.Valor
modelo.Carta *-.-> modelo.Palo
modelo.Palo "1" o--> "1" modelo.ColorPalo
modelo.InvalidMovementException "1"*-->"1" modelo.ErrorAlMover : motivo
modelo.InvalidMovementException --|> RunTimeException
modelo.Cimiento --|> modelo.ListaDeCartas
modelo.Klondike --|> modelo.Solitario
modelo.Spider --|> modelo.Solitario
SpiderFacil --|> modelo.Spider
SpiderDificil --|> modelo.Spider
modelo.Mazo --|> modelo.ListaDeCartas
modelo.PilaDelTableau --|> modelo.ListaDeCartas
modelo.Solitario "1"*-->"1" modelo.Variante
modelo.Solitario "1"*-->"1" modelo.Mazo
modelo.Solitario "1"*-->"4" modelo.Cimiento : cimientos
modelo.Solitario "1"*-->"7" modelo.PilaDelTableau :pilasTableau
modelo.Solitario "1"*-->"1" modelo.Basura


@enduml